{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NotionSci Collection of scientific app/tool syncs for Notion API This cli is meant to allow syncing of scienfic/reasearch tools to notion. (Such as Zotero, ...) Installation pip install notionsci Features Zotero Synchronization References Sync (One Way) Collections Sync (One Way) Useful Notion Tools Page Duplication Workspace Trash Cleaning Quick Start Before getting started, configure Notion intergration and Zotero integration . Duplicate the Zotero Library Template and synchronize the Zotero Collections with: notionsci sync zotero collections <url or id of the cloned library template page> and the References with: notionsci sync zotero refs <url or id of the cloned library template page> Documentation","title":"Overview"},{"location":"#installation","text":"pip install notionsci","title":"Installation"},{"location":"#features","text":"Zotero Synchronization References Sync (One Way) Collections Sync (One Way) Useful Notion Tools Page Duplication Workspace Trash Cleaning","title":"Features"},{"location":"#quick-start","text":"Before getting started, configure Notion intergration and Zotero integration . Duplicate the Zotero Library Template and synchronize the Zotero Collections with: notionsci sync zotero collections <url or id of the cloned library template page> and the References with: notionsci sync zotero refs <url or id of the cloned library template page>","title":"Quick Start"},{"location":"#documentation","text":"","title":"Documentation"},{"location":"configuration/","text":"Configuration Initial run of notionsci cli command creates a default.yml config profile at: (Linux) ~/.config/notionsci (Mac OS X) /Library/Application Support/notionsci (Windows) %APPDATA%/Local/notionsci Configuration can be overridden by creating config.yml in the working directory. Profiles Profiles are additional copies of the configuration to separate Notion and other connection configuration for different tasks. Feel free to create additional profiles such as work.yml or school.yml within the configuration directory. The profile name can followingly be passed as --profile=work option. Example: notionsci --profile = work ... Options The default configuration looks as follows version : 1 connections : notion : token : '' notion_unofficial : token_v2 : '' zotero : library_id : '123456' library_type : 'user' token : '' development : test_page : https://www.notion.so/NotionSci-Tests-22ecab6188d147ef83fa455e2694395b templates : zotero_template : https://efficacious-alarm-7cc.notion.site/Zotero-Library-dd4b26a3b11d46518b70b5031aee8989","title":"Configuration"},{"location":"configuration/#configuration","text":"Initial run of notionsci cli command creates a default.yml config profile at: (Linux) ~/.config/notionsci (Mac OS X) /Library/Application Support/notionsci (Windows) %APPDATA%/Local/notionsci Configuration can be overridden by creating config.yml in the working directory.","title":"Configuration"},{"location":"configuration/#profiles","text":"Profiles are additional copies of the configuration to separate Notion and other connection configuration for different tasks. Feel free to create additional profiles such as work.yml or school.yml within the configuration directory. The profile name can followingly be passed as --profile=work option. Example: notionsci --profile = work ...","title":"Profiles"},{"location":"configuration/#options","text":"The default configuration looks as follows version : 1 connections : notion : token : '' notion_unofficial : token_v2 : '' zotero : library_id : '123456' library_type : 'user' token : '' development : test_page : https://www.notion.so/NotionSci-Tests-22ecab6188d147ef83fa455e2694395b templates : zotero_template : https://efficacious-alarm-7cc.notion.site/Zotero-Library-dd4b26a3b11d46518b70b5031aee8989","title":"Options"},{"location":"contributing/","text":"Contributing Guidelines If you are a first time contributor, start by reading this fantastic guide . Read the docs notion-sdk-py Notion API Reference NotionSci System Requirements git python pipenv Fork the repository and clone it. Checkout a new feature branch from master . This guide will be really helpful if you are a newbie. Install dependencies inside a virtual environment. pipenv install Install pre-commit hooks. pre-commit install Follow the code style enforced by tools such as black, isort, flake, mypy. For markdown files, markdownlint must be followed. Tests must pass. If you are adding features write tests.","title":"Contributing"},{"location":"contributing/#contributing-guidelines","text":"If you are a first time contributor, start by reading this fantastic guide . Read the docs notion-sdk-py Notion API Reference NotionSci System Requirements git python pipenv Fork the repository and clone it. Checkout a new feature branch from master . This guide will be really helpful if you are a newbie. Install dependencies inside a virtual environment. pipenv install Install pre-commit hooks. pre-commit install Follow the code style enforced by tools such as black, isort, flake, mypy. For markdown files, markdownlint must be followed. Tests must pass. If you are adding features write tests.","title":"Contributing Guidelines"},{"location":"license/","text":"MIT License Copyright (c) 2021 Egor Dmitriev Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"notion/","text":"Notion The library provides a collection of useful utilities to manage your Notion workspace. Setting up Connection The main goal of this application is to use the Official Notion API whereever possible. Unfortunately, is still in beta and misses various functions required for task automation. Therefore, we currently use both API's, though if you do not want to use the Unofficial API it is optional. All functions using the Unofficial API are marked as such and should in this case be avoided. Official API Configuring the Official API is quite straightforward. Create an internal integration for the desired workspace and find the API token. Give access to your integration for the desired pages within your workspace. Update the configuration with the obtained credentials: ... connections : ... notion : token : 'your api token goes here' \u2192 Learn more about authorization . \u2192 Managing intergrations . Unofficial API Configuring Unofficial Notion API requires obtain the token_v2 value by inspecting your browser cookies on a logged-in (non-guest) session on Notion.so. Update the configuration with the obtained credentials: ... connections : ... notion_unofficial : token_v2 : 'your api token goes here' Duplicating Pages It is possible to duplicate a page from the CLI which is useful for setup automation. This can be done by specifying source page url and target parent page url. Example: notionsci notion duplicate < source page url or id> <parent page url of id> Usage: python -m notionsci notion duplicate [ OPTIONS ] SOURCE PARENT Duplicates given SOURCE page into a PARENT page as a child page. SOURCE: Source page ID or url PARENT: Destination parent page ID or url Requires unofficial notion api Options: --target_id TEXT Unique ID for the resulting page --help Show this message and exit. Downloading Markdown Pages It is possible to download pages as markdown files. Note: that currently not all blocks are supported due to Notion api limitations Example: notionsci notion download-md < source page url or id> -o ./test.md Usage: python -m notionsci notion download-md [ OPTIONS ] PAGE Downloads given PAGE as a markdown file as given output file or folder Note: that currently not all blocks are supported due to Notion api limitations :param page: :param output: :return: Options: -o, --output TEXT Output directory or file --help Show this message and exit. Cleaning Workspace Trash When you or the connection delete the page, it is archived and placed in the trash. Cleaning it manually is slow, therefore the following command can be used te permanently delete all pages in the trash bin of the given workspace. Example: notionsci notion clear-trash <workspace name> Usage: python -m notionsci notion clear-trash [ OPTIONS ] [ WORKSPACE ] Permanently deleted all _deleted_/_trashed_ pages in a workspace WORKSPACE: Workspace id or name to clean. If not specified a selection dialog is prompted. Requires unofficial notion api Options: --help Show this message and exit.","title":"Notion"},{"location":"notion/#notion","text":"The library provides a collection of useful utilities to manage your Notion workspace.","title":"Notion"},{"location":"notion/#setting-up-connection","text":"The main goal of this application is to use the Official Notion API whereever possible. Unfortunately, is still in beta and misses various functions required for task automation. Therefore, we currently use both API's, though if you do not want to use the Unofficial API it is optional. All functions using the Unofficial API are marked as such and should in this case be avoided.","title":"Setting up Connection"},{"location":"notion/#official-api","text":"Configuring the Official API is quite straightforward. Create an internal integration for the desired workspace and find the API token. Give access to your integration for the desired pages within your workspace. Update the configuration with the obtained credentials: ... connections : ... notion : token : 'your api token goes here' \u2192 Learn more about authorization . \u2192 Managing intergrations .","title":"Official API"},{"location":"notion/#unofficial-api","text":"Configuring Unofficial Notion API requires obtain the token_v2 value by inspecting your browser cookies on a logged-in (non-guest) session on Notion.so. Update the configuration with the obtained credentials: ... connections : ... notion_unofficial : token_v2 : 'your api token goes here'","title":"Unofficial API"},{"location":"notion/#duplicating-pages","text":"It is possible to duplicate a page from the CLI which is useful for setup automation. This can be done by specifying source page url and target parent page url. Example: notionsci notion duplicate < source page url or id> <parent page url of id> Usage: python -m notionsci notion duplicate [ OPTIONS ] SOURCE PARENT Duplicates given SOURCE page into a PARENT page as a child page. SOURCE: Source page ID or url PARENT: Destination parent page ID or url Requires unofficial notion api Options: --target_id TEXT Unique ID for the resulting page --help Show this message and exit.","title":"Duplicating Pages"},{"location":"notion/#downloading-markdown-pages","text":"It is possible to download pages as markdown files. Note: that currently not all blocks are supported due to Notion api limitations Example: notionsci notion download-md < source page url or id> -o ./test.md Usage: python -m notionsci notion download-md [ OPTIONS ] PAGE Downloads given PAGE as a markdown file as given output file or folder Note: that currently not all blocks are supported due to Notion api limitations :param page: :param output: :return: Options: -o, --output TEXT Output directory or file --help Show this message and exit.","title":"Downloading Markdown Pages"},{"location":"notion/#cleaning-workspace-trash","text":"When you or the connection delete the page, it is archived and placed in the trash. Cleaning it manually is slow, therefore the following command can be used te permanently delete all pages in the trash bin of the given workspace. Example: notionsci notion clear-trash <workspace name> Usage: python -m notionsci notion clear-trash [ OPTIONS ] [ WORKSPACE ] Permanently deleted all _deleted_/_trashed_ pages in a workspace WORKSPACE: Workspace id or name to clean. If not specified a selection dialog is prompted. Requires unofficial notion api Options: --help Show this message and exit.","title":"Cleaning Workspace Trash"},{"location":"zotero/","text":"Zotero Zotero synchronization to Notion is a core component of NotionSci. Currently, only one way References and Collections sync is supported. Setting up Connection It is highly encouraged to separate api keys for certain library scopes. If you need to access multiple Zotero libraries you can create a separate profile for each. To obtain your Zotero api credentials you need to follow the following steps: You'll need the ID of the personal or group library you want to access: Your personal library ID is available here , in the section Your userID for use in API calls For group libraries , the ID can be found by opening the group's page: https://www.zotero.org/groups/groupname , and hovering over the group settings link. The ID is the integer after /groups/ You'll also need \u2020 to get an API key [here][https://www.zotero.org/settings/keys/new] Are you accessing your own Zotero library? library_type is 'user' Are you accessing a shared group library? library_type is 'group' . Update the configuration with the obtained credentials: ... connections : ... zotero : library_id : '123456' library_type : 'user' token : '' \u2192 Learn more about Zotero API authorization . Synchronization This sections assumes you already have a working Notion connection \u2192 See Docs . Duplicating the Project Template To get started with synchronization your workspace needs to have a page with the Zotero Library Template . You can duplicate it either manually or if you have Unofficial API set up you can run the following command: notionsci sync zotero template <parent page url or id> Usage: Usage: python -m notionsci sync zotero template [ OPTIONS ] PARENT Duplicates the standard Zotero Library template page to your workspace under the given parent page PARENT: Destination parent page ID or url Options: --help Show this message and exit. Collections Sync (One Way) It is possible to sync Zotero Collection tree to Notion. To do this you need to pass the url of your \"Zotero Collections\" page to the following command: notionsci sync zotero collections <url or id of the cloned library template page> Usage: Usage: python -m notionsci sync zotero collections [ OPTIONS ] TEMPLATE Starts a one way Zotero references sync to Notion TEMPLATE: Cloned template page ID or url Options: --force Ensures up to date items are also pushed to Zotero --help Show this message and exit. References Sync (One Way) To synchronize your references (Papers, Books, Articles, etc.) you need to pass url of your \"Zotero References\" page to the following command. notionsci sync zotero refs <url or id of the cloned library template page> To include the reference to collection relations you can also specify the collections database. notionsci sync zotero refs <url or id of the cloned library template page> Usage: Usage: python -m notionsci sync zotero refs [ OPTIONS ] TEMPLATE Starts a one way Zotero references sync to Notion TEMPLATE: Cloned template page ID or url When collecitons option is specified Unofficial Notion Api access is required Options: --force Ensures up to date items are also pushed to Zotero --help Show this message and exit.","title":"Zotero"},{"location":"zotero/#zotero","text":"Zotero synchronization to Notion is a core component of NotionSci. Currently, only one way References and Collections sync is supported.","title":"Zotero"},{"location":"zotero/#setting-up-connection","text":"It is highly encouraged to separate api keys for certain library scopes. If you need to access multiple Zotero libraries you can create a separate profile for each. To obtain your Zotero api credentials you need to follow the following steps: You'll need the ID of the personal or group library you want to access: Your personal library ID is available here , in the section Your userID for use in API calls For group libraries , the ID can be found by opening the group's page: https://www.zotero.org/groups/groupname , and hovering over the group settings link. The ID is the integer after /groups/ You'll also need \u2020 to get an API key [here][https://www.zotero.org/settings/keys/new] Are you accessing your own Zotero library? library_type is 'user' Are you accessing a shared group library? library_type is 'group' . Update the configuration with the obtained credentials: ... connections : ... zotero : library_id : '123456' library_type : 'user' token : '' \u2192 Learn more about Zotero API authorization .","title":"Setting up Connection"},{"location":"zotero/#synchronization","text":"This sections assumes you already have a working Notion connection \u2192 See Docs .","title":"Synchronization"},{"location":"zotero/#duplicating-the-project-template","text":"To get started with synchronization your workspace needs to have a page with the Zotero Library Template . You can duplicate it either manually or if you have Unofficial API set up you can run the following command: notionsci sync zotero template <parent page url or id> Usage: Usage: python -m notionsci sync zotero template [ OPTIONS ] PARENT Duplicates the standard Zotero Library template page to your workspace under the given parent page PARENT: Destination parent page ID or url Options: --help Show this message and exit.","title":"Duplicating the Project Template"},{"location":"zotero/#collections-sync-one-way","text":"It is possible to sync Zotero Collection tree to Notion. To do this you need to pass the url of your \"Zotero Collections\" page to the following command: notionsci sync zotero collections <url or id of the cloned library template page> Usage: Usage: python -m notionsci sync zotero collections [ OPTIONS ] TEMPLATE Starts a one way Zotero references sync to Notion TEMPLATE: Cloned template page ID or url Options: --force Ensures up to date items are also pushed to Zotero --help Show this message and exit.","title":"Collections Sync (One Way)"},{"location":"zotero/#references-sync-one-way","text":"To synchronize your references (Papers, Books, Articles, etc.) you need to pass url of your \"Zotero References\" page to the following command. notionsci sync zotero refs <url or id of the cloned library template page> To include the reference to collection relations you can also specify the collections database. notionsci sync zotero refs <url or id of the cloned library template page> Usage: Usage: python -m notionsci sync zotero refs [ OPTIONS ] TEMPLATE Starts a one way Zotero references sync to Notion TEMPLATE: Cloned template page ID or url When collecitons option is specified Unofficial Notion Api access is required Options: --force Ensures up to date items are also pushed to Zotero --help Show this message and exit.","title":"References Sync (One Way)"},{"location":"reference/sync/","text":"notionsci.sync special markdown special pages MarkdownPage dataclass MarkdownPage(filename: str, path: Optional[str] = None, created_at: Optional[datetime.datetime] = None, updated_at: Optional[datetime.datetime] = None, synced_at: Optional[datetime.datetime] = None, deleted: bool = False) MarkdownPagesSync dataclass MarkdownPagesSync(notion: notionsci.connections.notion.client.NotionClient, database_id: str, markdown_dir: str) structure Action dataclass Action(action_type: notionsci.sync.structure.ActionType, target: Optional[notionsci.sync.structure.ActionTarget] = None, a: Optional[~A] = None, b: Optional[~B] = None) ActionTarget An enumeration. ActionType An enumeration. zotero special base ZoteroNotionSync dataclass ZoteroNotionSync(notion: notionsci.connections.notion.client.NotionClient, zotero: notionsci.connections.zotero.client.ZoteroClient, database_id: str, force: bool = False, last_sync_date: Optional[datetime.datetime] = None) collections CollectionsSync dataclass CollectionsSync(notion: notionsci.connections.notion.client.NotionClient, zotero: notionsci.connections.zotero.client.ZoteroClient, database_id: str, force: bool = False, last_sync_date: Optional[datetime.datetime] = None, zotero_notion_ids: Dict[str, str] = ) refs RefsSync dataclass RefsSync(notion: notionsci.connections.notion.client.NotionClient, zotero: notionsci.connections.zotero.client.ZoteroClient, database_id: str, force: bool = False, last_sync_date: Optional[datetime.datetime] = None, collections_id: Optional[str] = None, notion_collections: Dict[str, notionsci.connections.notion.structures.content.Page] = , zotero_collections: Dict[str, notionsci.connections.zotero.structures.collection.Collection] = , collection_sets: Dict[str, Set[str]] = , special_tags_regex: str = None, twoway: bool = True)","title":"Sync"},{"location":"reference/sync/#notionsci.sync","text":"","title":"sync"},{"location":"reference/sync/#notionsci.sync.markdown","text":"","title":"markdown"},{"location":"reference/sync/#notionsci.sync.markdown.pages","text":"","title":"pages"},{"location":"reference/sync/#notionsci.sync.markdown.pages.MarkdownPage","text":"MarkdownPage(filename: str, path: Optional[str] = None, created_at: Optional[datetime.datetime] = None, updated_at: Optional[datetime.datetime] = None, synced_at: Optional[datetime.datetime] = None, deleted: bool = False)","title":"MarkdownPage"},{"location":"reference/sync/#notionsci.sync.markdown.pages.MarkdownPagesSync","text":"MarkdownPagesSync(notion: notionsci.connections.notion.client.NotionClient, database_id: str, markdown_dir: str)","title":"MarkdownPagesSync"},{"location":"reference/sync/#notionsci.sync.structure","text":"","title":"structure"},{"location":"reference/sync/#notionsci.sync.structure.Action","text":"Action(action_type: notionsci.sync.structure.ActionType, target: Optional[notionsci.sync.structure.ActionTarget] = None, a: Optional[~A] = None, b: Optional[~B] = None)","title":"Action"},{"location":"reference/sync/#notionsci.sync.structure.ActionTarget","text":"An enumeration.","title":"ActionTarget"},{"location":"reference/sync/#notionsci.sync.structure.ActionType","text":"An enumeration.","title":"ActionType"},{"location":"reference/sync/#notionsci.sync.zotero","text":"","title":"zotero"},{"location":"reference/sync/#notionsci.sync.zotero.base","text":"","title":"base"},{"location":"reference/sync/#notionsci.sync.zotero.base.ZoteroNotionSync","text":"ZoteroNotionSync(notion: notionsci.connections.notion.client.NotionClient, zotero: notionsci.connections.zotero.client.ZoteroClient, database_id: str, force: bool = False, last_sync_date: Optional[datetime.datetime] = None)","title":"ZoteroNotionSync"},{"location":"reference/sync/#notionsci.sync.zotero.collections","text":"","title":"collections"},{"location":"reference/sync/#notionsci.sync.zotero.collections.CollectionsSync","text":"CollectionsSync(notion: notionsci.connections.notion.client.NotionClient, zotero: notionsci.connections.zotero.client.ZoteroClient, database_id: str, force: bool = False, last_sync_date: Optional[datetime.datetime] = None, zotero_notion_ids: Dict[str, str] = )","title":"CollectionsSync"},{"location":"reference/sync/#notionsci.sync.zotero.refs","text":"","title":"refs"},{"location":"reference/sync/#notionsci.sync.zotero.refs.RefsSync","text":"RefsSync(notion: notionsci.connections.notion.client.NotionClient, zotero: notionsci.connections.zotero.client.ZoteroClient, database_id: str, force: bool = False, last_sync_date: Optional[datetime.datetime] = None, collections_id: Optional[str] = None, notion_collections: Dict[str, notionsci.connections.notion.structures.content.Page] = , zotero_collections: Dict[str, notionsci.connections.zotero.structures.collection.Collection] = , collection_sets: Dict[str, Set[str]] = , special_tags_regex: str = None, twoway: bool = True)","title":"RefsSync"},{"location":"reference/connections/notion/","text":"notionsci.connections.notion special client NotionApiMixin dataclass NotionApiMixin(client: Optional[notion_client.client.Client] = None) NotionClient dataclass NotionClient(client: Optional[notion_client.client.Client] = None) structures special blocks Block dataclass Block(object: str = 'block', id: Optional[str] = None, type: Optional[notionsci.connections.notion.structures.blocks.BlockType] = None, created_time: Optional[datetime.datetime] = None, last_edited_time: Optional[datetime.datetime] = None, archived: bool = False, has_children: bool = True, paragraph: Optional[notionsci.connections.notion.structures.blocks.ParagraphBlock] = None, heading_1: Optional[notionsci.connections.notion.structures.blocks.Heading1Block] = None, heading_2: Optional[notionsci.connections.notion.structures.blocks.Heading2Block] = None, heading_3: Optional[notionsci.connections.notion.structures.blocks.Heading3Block] = None, bulleted_list_item: Optional[notionsci.connections.notion.structures.blocks.BulletedListBlock] = None, numbered_list_item: Optional[notionsci.connections.notion.structures.blocks.NumberedListBlock] = None, to_do: Optional[notionsci.connections.notion.structures.blocks.TodoBlock] = None, toggle: Optional[notionsci.connections.notion.structures.blocks.ToggleBlock] = None, child_page: Optional[notionsci.connections.notion.structures.blocks.ChildPageBlock] = None, embed: Optional[notionsci.connections.notion.structures.blocks.EmbedBlock] = None, image: Optional[notionsci.connections.notion.structures.blocks.ImageBlock] = None, video: Optional[notionsci.connections.notion.structures.blocks.VideoBlock] = None, file: Optional[notionsci.connections.notion.structures.common.FileObject] = None, pdf: Optional[notionsci.connections.notion.structures.blocks.PdfBlock] = None, bookmark: Optional[notionsci.connections.notion.structures.blocks.BookmarkBlock] = None, equation: Optional[notionsci.connections.notion.structures.blocks.EquationBlock] = None, code: Optional[notionsci.connections.notion.structures.blocks.CodeBlock] = None, child_database: Optional[notionsci.connections.notion.structures.blocks.ChildDatabaseBlock] = None, table_of_contents: Optional[notionsci.connections.notion.structures.blocks.TableOfContentsBlock] = None, divider: Optional[notionsci.connections.notion.structures.blocks.DividerBlock] = None, unsupported: Optional[str] = None) BlockType An enumeration. BookmarkBlock dataclass BookmarkBlock(url: str, caption: List[notionsci.connections.notion.structures.common.RichText]) BulletedListBlock dataclass BulletedListBlock(children: Optional[List[ForwardRef('Block')]] = None, text: List[notionsci.connections.notion.structures.common.RichText] = ) ChildDatabaseBlock dataclass ChildDatabaseBlock(title: str, database: Optional[ForwardRef('notionsci.connections.notion.Database')] = None, children: Optional[List[ForwardRef('notionsci.connections.notion.Page')]] = None) ChildPageBlock dataclass ChildPageBlock(title: str) ChildrenMixin dataclass ChildrenMixin(children: Optional[List[ForwardRef('Block')]] = None) CodeBlock dataclass CodeBlock(text: List[notionsci.connections.notion.structures.common.RichText], language: str) DividerBlock dataclass DividerBlock() EmbedBlock dataclass EmbedBlock(url: str, caption: List[notionsci.connections.notion.structures.common.RichText]) EquationBlock dataclass EquationBlock(expression: str) Heading1Block dataclass Heading1Block(text: List[notionsci.connections.notion.structures.common.RichText]) Heading2Block dataclass Heading2Block(text: List[notionsci.connections.notion.structures.common.RichText]) Heading3Block dataclass Heading3Block(text: List[notionsci.connections.notion.structures.common.RichText]) HeadingBlock dataclass HeadingBlock(text: List[notionsci.connections.notion.structures.common.RichText]) ImageBlock dataclass ImageBlock(type: notionsci.connections.notion.structures.common.FileType, caption: types.Undefinable_typing.List[notionsci.connections.notion.structures.common.RichText] = None, file: types.Undefinable_FileTypeObject = None, external: types.Undefinable_FileTypeObject = None, name: types.Undefinable_str = None) ListBlock dataclass ListBlock(children: Optional[List[ForwardRef('Block')]] = None, text: List[notionsci.connections.notion.structures.common.RichText] = ) NumberedListBlock dataclass NumberedListBlock(children: Optional[List[ForwardRef('Block')]] = None, text: List[notionsci.connections.notion.structures.common.RichText] = ) ParagraphBlock dataclass ParagraphBlock(children: Optional[List[ForwardRef('Block')]] = None, text: List[notionsci.connections.notion.structures.common.RichText] = ) PdfBlock dataclass PdfBlock(type: notionsci.connections.notion.structures.common.FileType, caption: types.Undefinable_typing.List[notionsci.connections.notion.structures.common.RichText] = None, file: types.Undefinable_FileTypeObject = None, external: types.Undefinable_FileTypeObject = None, name: types.Undefinable_str = None) TableOfContentsBlock dataclass TableOfContentsBlock() TodoBlock dataclass TodoBlock(children: Optional[List[ForwardRef('Block')]] = None, text: List[notionsci.connections.notion.structures.common.RichText] = , checked: Optional[bool] = None) ToggleBlock dataclass ToggleBlock(children: Optional[List[ForwardRef('Block')]] = None, text: List[notionsci.connections.notion.structures.common.RichText] = ) VideoBlock dataclass VideoBlock(type: notionsci.connections.notion.structures.common.FileType, caption: types.Undefinable_typing.List[notionsci.connections.notion.structures.common.RichText] = None, file: types.Undefinable_FileTypeObject = None, external: types.Undefinable_FileTypeObject = None, name: types.Undefinable_str = None) common Annotation dataclass Annotation(bold: bool, italic: bool, strikethrough: bool, underline: bool, code: bool, color: str) EmojiObject dataclass EmojiObject(emoji: str, type: str = 'emoji') EquationObject dataclass EquationObject(expression: str) FileObject dataclass FileObject(type: notionsci.connections.notion.structures.common.FileType, caption: types.Undefinable_typing.List[notionsci.connections.notion.structures.common.RichText] = None, file: types.Undefinable_FileTypeObject = None, external: types.Undefinable_FileTypeObject = None, name: types.Undefinable_str = None) FileType An enumeration. FileTypeObject dataclass FileTypeObject(url: str, expiry_time: Optional[datetime.datetime] = None) MentionObject dataclass MentionObject(type: str, user: types.Undefinable_UserObject = None, page: types.Undefinable_PageMention = None) PageMention dataclass PageMention(id: str) RichText dataclass RichText(type: notionsci.connections.notion.structures.common.RichTextType, plain_text: types.Undefinable_str = None, annotations: types.Undefinable_Annotation = None, href: types.Undefinable_str = None, text: types.Undefinable_TextObject = None, equation: types.Undefinable_EquationObject = None, mention: types.Undefinable_MentionObject = None) RichTextType An enumeration. TextObject dataclass TextObject(content: str, link: Optional[Dict] = None) UserObject dataclass UserObject(object: str = 'user', id: Optional[str] = None, type: Optional[str] = None, name: Optional[str] = None, avatar_url: Optional[str] = None, person: Optional[Dict] = None, bot: Optional[Dict] = None) content ContentObject dataclass ContentObject(object: str, id: Optional[str] = None, parent: Optional[notionsci.connections.notion.structures.content.Parent] = None, url: Optional[str] = None, icon: Union[notionsci.connections.notion.structures.common.FileObject, notionsci.connections.notion.structures.common.EmojiObject, NoneType] = None, cover: Optional[notionsci.connections.notion.structures.common.FileObject] = None, created_time: Optional[datetime.datetime] = None, last_edited_time: Optional[datetime.datetime] = None) Database dataclass Database(properties: Dict[str, notionsci.connections.notion.structures.properties.PropertyDef] = , object: str = 'database', id: Optional[str] = None, parent: Optional[notionsci.connections.notion.structures.content.Parent] = None, url: Optional[str] = None, icon: Union[notionsci.connections.notion.structures.common.FileObject, notionsci.connections.notion.structures.common.EmojiObject, NoneType] = None, cover: Optional[notionsci.connections.notion.structures.common.FileObject] = None, created_time: Optional[datetime.datetime] = None, last_edited_time: Optional[datetime.datetime] = None, title: Optional[List[notionsci.connections.notion.structures.common.RichText]] = None) HasPropertiesMixin dataclass HasPropertiesMixin(properties: Dict[str, ~PT] = ) Page dataclass Page(properties: Dict[str, notionsci.connections.notion.structures.properties.Property] = , children: Optional[List[ForwardRef('Block')]] = None, object: str = 'page', id: Optional[str] = None, parent: Optional[notionsci.connections.notion.structures.content.Parent] = None, url: Optional[str] = None, icon: Union[notionsci.connections.notion.structures.common.FileObject, notionsci.connections.notion.structures.common.EmojiObject, NoneType] = None, cover: Optional[notionsci.connections.notion.structures.common.FileObject] = None, created_time: Optional[datetime.datetime] = None, last_edited_time: Optional[datetime.datetime] = None, archived: bool = False) Parent dataclass Parent(type: notionsci.connections.notion.structures.content.ParentType, database_id: types.Undefinable_str = None, page_id: types.Undefinable_str = None, workspace: types.Undefinable_bool = None) ParentType An enumeration. properties DateValue dataclass DateValue(start: str, end: types.Undefinable_str = None, time_zone: types.Undefinable_str = None) MultiSelectDef dataclass SelectDef(options: List[notionsci.connections.notion.structures.properties.SelectValue]) Property dataclass Property(type: notionsci.connections.notion.structures.properties.PropertyType, id: types.Undefinable_str = None, title: types.Undefinable_typing.List[notionsci.connections.notion.structures.common.RichText] = None, rich_text: types.Undefinable_typing.List[notionsci.connections.notion.structures.common.RichText] = None, number: types.Undefinable_int = None, select: types.Undefinable_SelectValue = None, multi_select: types.Undefinable_typing.List[notionsci.connections.notion.structures.properties.SelectValue] = None, date: types.Undefinable_DateValue = None, people: types.Undefinable_typing.List[typing.Dict] = None, files: types.Undefinable_typing.List[notionsci.connections.notion.structures.common.FileObject] = None, checkbox: types.Undefinable_bool = None, url: types.Undefinable_str = None, email: types.Undefinable_str = None, phone_number: types.Undefinable_typing.Dict = None, formula: types.Undefinable_typing.Dict = None, relation: types.Undefinable_typing.List[notionsci.connections.notion.structures.properties.RelationItem] = None, rollup: types.Undefinable_typing.Dict = None, created_time: types.Undefinable_datetime = None, created_by: types.Undefinable_typing.Dict = None, last_edited_time: types.Undefinable_datetime = None, last_edited_by: types.Undefinable_typing.Dict = None) PropertyDef dataclass PropertyDef(type: notionsci.connections.notion.structures.properties.PropertyType, id: types.Undefinable_str = None, name: types.Undefinable_str = None, title: types.Undefinable_typing.Dict = None, rich_text: types.Undefinable_typing.Dict = None, number: types.Undefinable_typing.Dict = None, select: types.Undefinable_SelectDef = None, multi_select: types.Undefinable_SelectDef = None, date: types.Undefinable_typing.Dict = None, people: types.Undefinable_typing.List[typing.Dict] = None, files: types.Undefinable_typing.Dict = None, checkbox: types.Undefinable_typing.Dict = None, url: types.Undefinable_typing.Dict = None, email: types.Undefinable_typing.Dict = None, phone_number: types.Undefinable_typing.Dict = None, formula: types.Undefinable_typing.Dict = None, relation: types.Undefinable_RelationDef = None, rollup: types.Undefinable_typing.Dict = None, created_time: types.Undefinable_typing.Dict = None, created_by: types.Undefinable_typing.Dict = None, last_edited_time: types.Undefinable_typing.Dict = None, last_edited_by: types.Undefinable_typing.Dict = None) PropertyType An enumeration. RelationDef dataclass RelationDef(database_id: str, synced_property_name: Optional[str] = None, synced_property_id: Optional[str] = None) RelationItem dataclass RelationItem(id: str) SelectDef dataclass SelectDef(options: List[notionsci.connections.notion.structures.properties.SelectValue]) SelectValue dataclass SelectValue(name: str, id: types.Undefinable_str = None, color: types.Undefinable_str = None) results QueryResult dataclass QueryResult(object: str = 'list', results: List[Union[notionsci.connections.notion.structures.content.Page, notionsci.connections.notion.structures.content.Database, notionsci.connections.notion.structures.blocks.Block]] = , next_cursor: Optional[str] = None, has_more: bool = False) SortDirection An enumeration. SortObject dataclass SortObject(direction: notionsci.connections.notion.structures.results.SortDirection, timestamp: Optional[notionsci.connections.notion.structures.results.SortTimestamp] = None, property: Optional[str] = None) SortTimestamp An enumeration.","title":"Notion"},{"location":"reference/connections/notion/#notionsci.connections.notion","text":"","title":"notion"},{"location":"reference/connections/notion/#notionsci.connections.notion.client","text":"","title":"client"},{"location":"reference/connections/notion/#notionsci.connections.notion.client.NotionApiMixin","text":"NotionApiMixin(client: Optional[notion_client.client.Client] = None)","title":"NotionApiMixin"},{"location":"reference/connections/notion/#notionsci.connections.notion.client.NotionClient","text":"NotionClient(client: Optional[notion_client.client.Client] = None)","title":"NotionClient"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures","text":"","title":"structures"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.blocks","text":"","title":"blocks"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.blocks.Block","text":"Block(object: str = 'block', id: Optional[str] = None, type: Optional[notionsci.connections.notion.structures.blocks.BlockType] = None, created_time: Optional[datetime.datetime] = None, last_edited_time: Optional[datetime.datetime] = None, archived: bool = False, has_children: bool = True, paragraph: Optional[notionsci.connections.notion.structures.blocks.ParagraphBlock] = None, heading_1: Optional[notionsci.connections.notion.structures.blocks.Heading1Block] = None, heading_2: Optional[notionsci.connections.notion.structures.blocks.Heading2Block] = None, heading_3: Optional[notionsci.connections.notion.structures.blocks.Heading3Block] = None, bulleted_list_item: Optional[notionsci.connections.notion.structures.blocks.BulletedListBlock] = None, numbered_list_item: Optional[notionsci.connections.notion.structures.blocks.NumberedListBlock] = None, to_do: Optional[notionsci.connections.notion.structures.blocks.TodoBlock] = None, toggle: Optional[notionsci.connections.notion.structures.blocks.ToggleBlock] = None, child_page: Optional[notionsci.connections.notion.structures.blocks.ChildPageBlock] = None, embed: Optional[notionsci.connections.notion.structures.blocks.EmbedBlock] = None, image: Optional[notionsci.connections.notion.structures.blocks.ImageBlock] = None, video: Optional[notionsci.connections.notion.structures.blocks.VideoBlock] = None, file: Optional[notionsci.connections.notion.structures.common.FileObject] = None, pdf: Optional[notionsci.connections.notion.structures.blocks.PdfBlock] = None, bookmark: Optional[notionsci.connections.notion.structures.blocks.BookmarkBlock] = None, equation: Optional[notionsci.connections.notion.structures.blocks.EquationBlock] = None, code: Optional[notionsci.connections.notion.structures.blocks.CodeBlock] = None, child_database: Optional[notionsci.connections.notion.structures.blocks.ChildDatabaseBlock] = None, table_of_contents: Optional[notionsci.connections.notion.structures.blocks.TableOfContentsBlock] = None, divider: Optional[notionsci.connections.notion.structures.blocks.DividerBlock] = None, unsupported: Optional[str] = None)","title":"Block"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.blocks.BlockType","text":"An enumeration.","title":"BlockType"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.blocks.BookmarkBlock","text":"BookmarkBlock(url: str, caption: List[notionsci.connections.notion.structures.common.RichText])","title":"BookmarkBlock"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.blocks.BulletedListBlock","text":"BulletedListBlock(children: Optional[List[ForwardRef('Block')]] = None, text: List[notionsci.connections.notion.structures.common.RichText] = )","title":"BulletedListBlock"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.blocks.ChildDatabaseBlock","text":"ChildDatabaseBlock(title: str, database: Optional[ForwardRef('notionsci.connections.notion.Database')] = None, children: Optional[List[ForwardRef('notionsci.connections.notion.Page')]] = None)","title":"ChildDatabaseBlock"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.blocks.ChildPageBlock","text":"ChildPageBlock(title: str)","title":"ChildPageBlock"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.blocks.ChildrenMixin","text":"ChildrenMixin(children: Optional[List[ForwardRef('Block')]] = None)","title":"ChildrenMixin"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.blocks.CodeBlock","text":"CodeBlock(text: List[notionsci.connections.notion.structures.common.RichText], language: str)","title":"CodeBlock"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.blocks.DividerBlock","text":"DividerBlock()","title":"DividerBlock"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.blocks.EmbedBlock","text":"EmbedBlock(url: str, caption: List[notionsci.connections.notion.structures.common.RichText])","title":"EmbedBlock"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.blocks.EquationBlock","text":"EquationBlock(expression: str)","title":"EquationBlock"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.blocks.Heading1Block","text":"Heading1Block(text: List[notionsci.connections.notion.structures.common.RichText])","title":"Heading1Block"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.blocks.Heading2Block","text":"Heading2Block(text: List[notionsci.connections.notion.structures.common.RichText])","title":"Heading2Block"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.blocks.Heading3Block","text":"Heading3Block(text: List[notionsci.connections.notion.structures.common.RichText])","title":"Heading3Block"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.blocks.HeadingBlock","text":"HeadingBlock(text: List[notionsci.connections.notion.structures.common.RichText])","title":"HeadingBlock"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.blocks.ImageBlock","text":"ImageBlock(type: notionsci.connections.notion.structures.common.FileType, caption: types.Undefinable_typing.List[notionsci.connections.notion.structures.common.RichText] = None, file: types.Undefinable_FileTypeObject = None, external: types.Undefinable_FileTypeObject = None, name: types.Undefinable_str = None)","title":"ImageBlock"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.blocks.ListBlock","text":"ListBlock(children: Optional[List[ForwardRef('Block')]] = None, text: List[notionsci.connections.notion.structures.common.RichText] = )","title":"ListBlock"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.blocks.NumberedListBlock","text":"NumberedListBlock(children: Optional[List[ForwardRef('Block')]] = None, text: List[notionsci.connections.notion.structures.common.RichText] = )","title":"NumberedListBlock"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.blocks.ParagraphBlock","text":"ParagraphBlock(children: Optional[List[ForwardRef('Block')]] = None, text: List[notionsci.connections.notion.structures.common.RichText] = )","title":"ParagraphBlock"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.blocks.PdfBlock","text":"PdfBlock(type: notionsci.connections.notion.structures.common.FileType, caption: types.Undefinable_typing.List[notionsci.connections.notion.structures.common.RichText] = None, file: types.Undefinable_FileTypeObject = None, external: types.Undefinable_FileTypeObject = None, name: types.Undefinable_str = None)","title":"PdfBlock"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.blocks.TableOfContentsBlock","text":"TableOfContentsBlock()","title":"TableOfContentsBlock"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.blocks.TodoBlock","text":"TodoBlock(children: Optional[List[ForwardRef('Block')]] = None, text: List[notionsci.connections.notion.structures.common.RichText] = , checked: Optional[bool] = None)","title":"TodoBlock"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.blocks.ToggleBlock","text":"ToggleBlock(children: Optional[List[ForwardRef('Block')]] = None, text: List[notionsci.connections.notion.structures.common.RichText] = )","title":"ToggleBlock"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.blocks.VideoBlock","text":"VideoBlock(type: notionsci.connections.notion.structures.common.FileType, caption: types.Undefinable_typing.List[notionsci.connections.notion.structures.common.RichText] = None, file: types.Undefinable_FileTypeObject = None, external: types.Undefinable_FileTypeObject = None, name: types.Undefinable_str = None)","title":"VideoBlock"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.common","text":"","title":"common"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.common.Annotation","text":"Annotation(bold: bool, italic: bool, strikethrough: bool, underline: bool, code: bool, color: str)","title":"Annotation"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.common.EmojiObject","text":"EmojiObject(emoji: str, type: str = 'emoji')","title":"EmojiObject"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.common.EquationObject","text":"EquationObject(expression: str)","title":"EquationObject"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.common.FileObject","text":"FileObject(type: notionsci.connections.notion.structures.common.FileType, caption: types.Undefinable_typing.List[notionsci.connections.notion.structures.common.RichText] = None, file: types.Undefinable_FileTypeObject = None, external: types.Undefinable_FileTypeObject = None, name: types.Undefinable_str = None)","title":"FileObject"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.common.FileType","text":"An enumeration.","title":"FileType"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.common.FileTypeObject","text":"FileTypeObject(url: str, expiry_time: Optional[datetime.datetime] = None)","title":"FileTypeObject"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.common.MentionObject","text":"MentionObject(type: str, user: types.Undefinable_UserObject = None, page: types.Undefinable_PageMention = None)","title":"MentionObject"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.common.PageMention","text":"PageMention(id: str)","title":"PageMention"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.common.RichText","text":"RichText(type: notionsci.connections.notion.structures.common.RichTextType, plain_text: types.Undefinable_str = None, annotations: types.Undefinable_Annotation = None, href: types.Undefinable_str = None, text: types.Undefinable_TextObject = None, equation: types.Undefinable_EquationObject = None, mention: types.Undefinable_MentionObject = None)","title":"RichText"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.common.RichTextType","text":"An enumeration.","title":"RichTextType"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.common.TextObject","text":"TextObject(content: str, link: Optional[Dict] = None)","title":"TextObject"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.common.UserObject","text":"UserObject(object: str = 'user', id: Optional[str] = None, type: Optional[str] = None, name: Optional[str] = None, avatar_url: Optional[str] = None, person: Optional[Dict] = None, bot: Optional[Dict] = None)","title":"UserObject"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.content","text":"","title":"content"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.content.ContentObject","text":"ContentObject(object: str, id: Optional[str] = None, parent: Optional[notionsci.connections.notion.structures.content.Parent] = None, url: Optional[str] = None, icon: Union[notionsci.connections.notion.structures.common.FileObject, notionsci.connections.notion.structures.common.EmojiObject, NoneType] = None, cover: Optional[notionsci.connections.notion.structures.common.FileObject] = None, created_time: Optional[datetime.datetime] = None, last_edited_time: Optional[datetime.datetime] = None)","title":"ContentObject"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.content.Database","text":"Database(properties: Dict[str, notionsci.connections.notion.structures.properties.PropertyDef] = , object: str = 'database', id: Optional[str] = None, parent: Optional[notionsci.connections.notion.structures.content.Parent] = None, url: Optional[str] = None, icon: Union[notionsci.connections.notion.structures.common.FileObject, notionsci.connections.notion.structures.common.EmojiObject, NoneType] = None, cover: Optional[notionsci.connections.notion.structures.common.FileObject] = None, created_time: Optional[datetime.datetime] = None, last_edited_time: Optional[datetime.datetime] = None, title: Optional[List[notionsci.connections.notion.structures.common.RichText]] = None)","title":"Database"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.content.HasPropertiesMixin","text":"HasPropertiesMixin(properties: Dict[str, ~PT] = )","title":"HasPropertiesMixin"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.content.Page","text":"Page(properties: Dict[str, notionsci.connections.notion.structures.properties.Property] = , children: Optional[List[ForwardRef('Block')]] = None, object: str = 'page', id: Optional[str] = None, parent: Optional[notionsci.connections.notion.structures.content.Parent] = None, url: Optional[str] = None, icon: Union[notionsci.connections.notion.structures.common.FileObject, notionsci.connections.notion.structures.common.EmojiObject, NoneType] = None, cover: Optional[notionsci.connections.notion.structures.common.FileObject] = None, created_time: Optional[datetime.datetime] = None, last_edited_time: Optional[datetime.datetime] = None, archived: bool = False)","title":"Page"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.content.Parent","text":"Parent(type: notionsci.connections.notion.structures.content.ParentType, database_id: types.Undefinable_str = None, page_id: types.Undefinable_str = None, workspace: types.Undefinable_bool = None)","title":"Parent"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.content.ParentType","text":"An enumeration.","title":"ParentType"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.properties","text":"","title":"properties"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.properties.DateValue","text":"DateValue(start: str, end: types.Undefinable_str = None, time_zone: types.Undefinable_str = None)","title":"DateValue"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.properties.MultiSelectDef","text":"SelectDef(options: List[notionsci.connections.notion.structures.properties.SelectValue])","title":"MultiSelectDef"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.properties.Property","text":"Property(type: notionsci.connections.notion.structures.properties.PropertyType, id: types.Undefinable_str = None, title: types.Undefinable_typing.List[notionsci.connections.notion.structures.common.RichText] = None, rich_text: types.Undefinable_typing.List[notionsci.connections.notion.structures.common.RichText] = None, number: types.Undefinable_int = None, select: types.Undefinable_SelectValue = None, multi_select: types.Undefinable_typing.List[notionsci.connections.notion.structures.properties.SelectValue] = None, date: types.Undefinable_DateValue = None, people: types.Undefinable_typing.List[typing.Dict] = None, files: types.Undefinable_typing.List[notionsci.connections.notion.structures.common.FileObject] = None, checkbox: types.Undefinable_bool = None, url: types.Undefinable_str = None, email: types.Undefinable_str = None, phone_number: types.Undefinable_typing.Dict = None, formula: types.Undefinable_typing.Dict = None, relation: types.Undefinable_typing.List[notionsci.connections.notion.structures.properties.RelationItem] = None, rollup: types.Undefinable_typing.Dict = None, created_time: types.Undefinable_datetime = None, created_by: types.Undefinable_typing.Dict = None, last_edited_time: types.Undefinable_datetime = None, last_edited_by: types.Undefinable_typing.Dict = None)","title":"Property"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.properties.PropertyDef","text":"PropertyDef(type: notionsci.connections.notion.structures.properties.PropertyType, id: types.Undefinable_str = None, name: types.Undefinable_str = None, title: types.Undefinable_typing.Dict = None, rich_text: types.Undefinable_typing.Dict = None, number: types.Undefinable_typing.Dict = None, select: types.Undefinable_SelectDef = None, multi_select: types.Undefinable_SelectDef = None, date: types.Undefinable_typing.Dict = None, people: types.Undefinable_typing.List[typing.Dict] = None, files: types.Undefinable_typing.Dict = None, checkbox: types.Undefinable_typing.Dict = None, url: types.Undefinable_typing.Dict = None, email: types.Undefinable_typing.Dict = None, phone_number: types.Undefinable_typing.Dict = None, formula: types.Undefinable_typing.Dict = None, relation: types.Undefinable_RelationDef = None, rollup: types.Undefinable_typing.Dict = None, created_time: types.Undefinable_typing.Dict = None, created_by: types.Undefinable_typing.Dict = None, last_edited_time: types.Undefinable_typing.Dict = None, last_edited_by: types.Undefinable_typing.Dict = None)","title":"PropertyDef"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.properties.PropertyType","text":"An enumeration.","title":"PropertyType"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.properties.RelationDef","text":"RelationDef(database_id: str, synced_property_name: Optional[str] = None, synced_property_id: Optional[str] = None)","title":"RelationDef"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.properties.RelationItem","text":"RelationItem(id: str)","title":"RelationItem"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.properties.SelectDef","text":"SelectDef(options: List[notionsci.connections.notion.structures.properties.SelectValue])","title":"SelectDef"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.properties.SelectValue","text":"SelectValue(name: str, id: types.Undefinable_str = None, color: types.Undefinable_str = None)","title":"SelectValue"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.results","text":"","title":"results"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.results.QueryResult","text":"QueryResult(object: str = 'list', results: List[Union[notionsci.connections.notion.structures.content.Page, notionsci.connections.notion.structures.content.Database, notionsci.connections.notion.structures.blocks.Block]] = , next_cursor: Optional[str] = None, has_more: bool = False)","title":"QueryResult"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.results.SortDirection","text":"An enumeration.","title":"SortDirection"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.results.SortObject","text":"SortObject(direction: notionsci.connections.notion.structures.results.SortDirection, timestamp: Optional[notionsci.connections.notion.structures.results.SortTimestamp] = None, property: Optional[str] = None)","title":"SortObject"},{"location":"reference/connections/notion/#notionsci.connections.notion.structures.results.SortTimestamp","text":"An enumeration.","title":"SortTimestamp"},{"location":"reference/connections/notion_unofficial/","text":"notionsci.connections.notion_unofficial special client NotionUnofficialClient duplicate_page ( self , source_id , parent , block_uuid = None ) Duplicates source page to a new child page of the given parent Source code in notion_unofficial/client.py def duplicate_page ( self , source_id : ID , parent : Block , block_uuid : ID = None ) -> Block : \"\"\" Duplicates source page to a new child page of the given parent \"\"\" block_id = block_uuid or str ( uuid . uuid4 ()) space_id = parent . space_info [ 'spaceId' ] user_id = self . current_user . id parent_block_id = parent . id # Create a block with right copy indicator and user permission self . submit_transaction ([ op_copy_indicator ( space_id , block_id ), op_user_permission ( block_id , user_id ), op_parent_block ( block_id , parent_block_id ), op_list_after_block ( block_id , parent_block_id ) ]) self . submit_duplicate_task ( source_id , block_id ) return self . get_block ( block_id ) get_spaces ( self ) Returns a list of spaces user has access to Source code in notion_unofficial/client.py def get_spaces ( self ) -> Iterator [ Space ]: \"\"\" Returns a list of spaces user has access to \"\"\" response : dict = self . post ( 'getSpaces' , {}) . json () for data in response . values (): for space_id , space in data [ 'space' ] . items (): yield self . get_space ( space_id ) get_task_status ( self , task_id ) Get a status of a single task Source code in notion_unofficial/client.py def get_task_status ( self , task_id ): \"\"\" Get a status of a single task \"\"\" data = self . post ( \"getTasks\" , { \"taskIds\" : [ task_id ]} ) . json () results = data . get ( \"results\" ) if results is None : return None if not results : # Notion does not know about such a task print ( \"Invalid task ID.\" ) return None if len ( results ) >= 1 : return results [ 0 ] . get ( \"state\" ) return None submit_duplicate_task ( self , source_id , target_id ) Submits a task to notion to duplicate a block to target' Target must have copy indicator and right permissions Source code in notion_unofficial/client.py def submit_duplicate_task ( self , source_id : ID , target_id : ID ): \"\"\" Submits a task to notion to duplicate a block to target' Target must have copy indicator and right permissions \"\"\" data = self . post ( \"enqueueTask\" , { \"task\" : { \"eventName\" : \"duplicateBlock\" , \"request\" : { \"sourceBlockId\" : source_id , \"targetBlockId\" : target_id , \"addCopyName\" : False , \"deepCopyTransclusionContainers\" : True , } } }) . json () task_id = data . get ( \"taskId\" ) if task_id : # Wait until the duplication task finishes self . wait_for_task ( task_id ) wait_for_task ( self , task_id , interval = 1 , tries = 20 ) Wait for a task by looping 'tries' times ever 'interval' seconds. The 'interval' parameter can be used to specify milliseconds using double (e.g 0.75). Source code in notion_unofficial/client.py def wait_for_task ( self , task_id , interval = 1 , tries = 20 ): \"\"\" Wait for a task by looping 'tries' times ever 'interval' seconds. The 'interval' parameter can be used to specify milliseconds using double (e.g 0.75). \"\"\" for i in range ( tries ): state = self . get_task_status ( task_id ) if state in [ \"not_started\" , \"in_progress\" ]: sleep ( interval ) elif state == \"success\" : return state else : raise Exception ( 'Unexpected task state: {} ' . format ( state )) print ( \"Task takes more time than expected. Specify 'interval' or 'tries' to wait more.\" )","title":"Notion unofficial"},{"location":"reference/connections/notion_unofficial/#notionsci.connections.notion_unofficial","text":"","title":"notion_unofficial"},{"location":"reference/connections/notion_unofficial/#notionsci.connections.notion_unofficial.client","text":"","title":"client"},{"location":"reference/connections/notion_unofficial/#notionsci.connections.notion_unofficial.client.NotionUnofficialClient","text":"","title":"NotionUnofficialClient"},{"location":"reference/connections/notion_unofficial/#notionsci.connections.notion_unofficial.client.NotionUnofficialClient.duplicate_page","text":"Duplicates source page to a new child page of the given parent Source code in notion_unofficial/client.py def duplicate_page ( self , source_id : ID , parent : Block , block_uuid : ID = None ) -> Block : \"\"\" Duplicates source page to a new child page of the given parent \"\"\" block_id = block_uuid or str ( uuid . uuid4 ()) space_id = parent . space_info [ 'spaceId' ] user_id = self . current_user . id parent_block_id = parent . id # Create a block with right copy indicator and user permission self . submit_transaction ([ op_copy_indicator ( space_id , block_id ), op_user_permission ( block_id , user_id ), op_parent_block ( block_id , parent_block_id ), op_list_after_block ( block_id , parent_block_id ) ]) self . submit_duplicate_task ( source_id , block_id ) return self . get_block ( block_id )","title":"duplicate_page()"},{"location":"reference/connections/notion_unofficial/#notionsci.connections.notion_unofficial.client.NotionUnofficialClient.get_spaces","text":"Returns a list of spaces user has access to Source code in notion_unofficial/client.py def get_spaces ( self ) -> Iterator [ Space ]: \"\"\" Returns a list of spaces user has access to \"\"\" response : dict = self . post ( 'getSpaces' , {}) . json () for data in response . values (): for space_id , space in data [ 'space' ] . items (): yield self . get_space ( space_id )","title":"get_spaces()"},{"location":"reference/connections/notion_unofficial/#notionsci.connections.notion_unofficial.client.NotionUnofficialClient.get_task_status","text":"Get a status of a single task Source code in notion_unofficial/client.py def get_task_status ( self , task_id ): \"\"\" Get a status of a single task \"\"\" data = self . post ( \"getTasks\" , { \"taskIds\" : [ task_id ]} ) . json () results = data . get ( \"results\" ) if results is None : return None if not results : # Notion does not know about such a task print ( \"Invalid task ID.\" ) return None if len ( results ) >= 1 : return results [ 0 ] . get ( \"state\" ) return None","title":"get_task_status()"},{"location":"reference/connections/notion_unofficial/#notionsci.connections.notion_unofficial.client.NotionUnofficialClient.submit_duplicate_task","text":"Submits a task to notion to duplicate a block to target' Target must have copy indicator and right permissions Source code in notion_unofficial/client.py def submit_duplicate_task ( self , source_id : ID , target_id : ID ): \"\"\" Submits a task to notion to duplicate a block to target' Target must have copy indicator and right permissions \"\"\" data = self . post ( \"enqueueTask\" , { \"task\" : { \"eventName\" : \"duplicateBlock\" , \"request\" : { \"sourceBlockId\" : source_id , \"targetBlockId\" : target_id , \"addCopyName\" : False , \"deepCopyTransclusionContainers\" : True , } } }) . json () task_id = data . get ( \"taskId\" ) if task_id : # Wait until the duplication task finishes self . wait_for_task ( task_id )","title":"submit_duplicate_task()"},{"location":"reference/connections/notion_unofficial/#notionsci.connections.notion_unofficial.client.NotionUnofficialClient.wait_for_task","text":"Wait for a task by looping 'tries' times ever 'interval' seconds. The 'interval' parameter can be used to specify milliseconds using double (e.g 0.75). Source code in notion_unofficial/client.py def wait_for_task ( self , task_id , interval = 1 , tries = 20 ): \"\"\" Wait for a task by looping 'tries' times ever 'interval' seconds. The 'interval' parameter can be used to specify milliseconds using double (e.g 0.75). \"\"\" for i in range ( tries ): state = self . get_task_status ( task_id ) if state in [ \"not_started\" , \"in_progress\" ]: sleep ( interval ) elif state == \"success\" : return state else : raise Exception ( 'Unexpected task state: {} ' . format ( state )) print ( \"Task takes more time than expected. Specify 'interval' or 'tries' to wait more.\" )","title":"wait_for_task()"},{"location":"reference/connections/zotero/","text":"notionsci.connections.zotero special client ZoteroApiMixin dataclass ZoteroApiMixin(client: Optional[pyzotero.zotero.Zotero] = None) ZoteroClient dataclass ZoteroClient(client: Optional[pyzotero.zotero.Zotero] = None) helpers generate_citekey ( item ) Generates cite key according to default better bibtex format auth:lower [year] :param item: :return: Source code in zotero/helpers.py def generate_citekey ( item : Item ): \"\"\" Generates cite key according to default better bibtex format [auth:lower][shorttitle3_3][year] :param item: :return: \"\"\" authors = item . authors . lower () . split () author = authors [ 0 ] if len ( authors ) > 0 else '' shorttitle3_3 = short_title ( item . title , 3 ) year = item . year return f ' { author }{ shorttitle3_3 }{ year } ' structures special collection Collection dataclass Collection(key: str, version: int, library: notionsci.connections.zotero.structures.library.Library, links: Dict, meta: notionsci.connections.zotero.structures.common.Meta, data: notionsci.connections.zotero.structures.collection.CollectionData, children: Optional[Dict[str, notionsci.connections.zotero.structures.collection.CollectionData]] = None, items: Optional[Dict[str, notionsci.connections.zotero.structures.item.ItemData]] = None) CollectionData dataclass CollectionData(key: str, version: int, name: str, parent_collection: Optional[str] = None, relations: Optional[Dict] = None) common Entity dataclass Entity(key: str, version: int) Meta dataclass Meta(created_by_user: Optional[Dict] = None, parsed_date: Optional[str] = None, creator_summary: Optional[str] = None, num_items: Optional[int] = None, num_collections: Optional[int] = None, num_children: Optional[int] = None) item Item dataclass Item(key: str, version: int, library: notionsci.connections.zotero.structures.library.Library, links: Dict, meta: notionsci.connections.zotero.structures.common.Meta, data: notionsci.connections.zotero.structures.item.ItemData, children: Optional[Dict[str, notionsci.connections.zotero.structures.item.ItemData]] = None) ItemData dataclass ItemData(key: str, version: int, item_type: notionsci.connections.zotero.structures.item.ItemType, date_added: datetime.datetime, date_modified: datetime.datetime, parent_item: types.Undefinable_str = None, tags: Optional[List[notionsci.connections.zotero.structures.item.Tag]] = None, collections: Optional[List[str]] = None, relations: Optional[Dict] = None, properties: Optional[Dict[str, Any]] = None) ItemType An enumeration. Tag dataclass Tag(tag: str, type: types.Undefinable_int = None) library Library dataclass Library(id: int, type: notionsci.connections.zotero.structures.library.LibraryType, name: str, links: Dict) LibraryType An enumeration. query Direction An enumeration. SearchPagination dataclass SearchPagination(sort: Optional[str] = None, direction: Optional[notionsci.connections.zotero.structures.query.Direction] = None, limit: int = 100, start: int = 0) SearchParameters dataclass SearchParameters(item_key: Optional[List[str]] = None, item_type: Optional[str] = None, q: Optional[str] = None, since: Optional[int] = None, tag: Optional[str] = None, include_trashed: Optional[int] = None)","title":"Zotero"},{"location":"reference/connections/zotero/#notionsci.connections.zotero","text":"","title":"zotero"},{"location":"reference/connections/zotero/#notionsci.connections.zotero.client","text":"","title":"client"},{"location":"reference/connections/zotero/#notionsci.connections.zotero.client.ZoteroApiMixin","text":"ZoteroApiMixin(client: Optional[pyzotero.zotero.Zotero] = None)","title":"ZoteroApiMixin"},{"location":"reference/connections/zotero/#notionsci.connections.zotero.client.ZoteroClient","text":"ZoteroClient(client: Optional[pyzotero.zotero.Zotero] = None)","title":"ZoteroClient"},{"location":"reference/connections/zotero/#notionsci.connections.zotero.helpers","text":"","title":"helpers"},{"location":"reference/connections/zotero/#notionsci.connections.zotero.helpers.generate_citekey","text":"Generates cite key according to default better bibtex format auth:lower [year] :param item: :return: Source code in zotero/helpers.py def generate_citekey ( item : Item ): \"\"\" Generates cite key according to default better bibtex format [auth:lower][shorttitle3_3][year] :param item: :return: \"\"\" authors = item . authors . lower () . split () author = authors [ 0 ] if len ( authors ) > 0 else '' shorttitle3_3 = short_title ( item . title , 3 ) year = item . year return f ' { author }{ shorttitle3_3 }{ year } '","title":"generate_citekey()"},{"location":"reference/connections/zotero/#notionsci.connections.zotero.structures","text":"","title":"structures"},{"location":"reference/connections/zotero/#notionsci.connections.zotero.structures.collection","text":"","title":"collection"},{"location":"reference/connections/zotero/#notionsci.connections.zotero.structures.collection.Collection","text":"Collection(key: str, version: int, library: notionsci.connections.zotero.structures.library.Library, links: Dict, meta: notionsci.connections.zotero.structures.common.Meta, data: notionsci.connections.zotero.structures.collection.CollectionData, children: Optional[Dict[str, notionsci.connections.zotero.structures.collection.CollectionData]] = None, items: Optional[Dict[str, notionsci.connections.zotero.structures.item.ItemData]] = None)","title":"Collection"},{"location":"reference/connections/zotero/#notionsci.connections.zotero.structures.collection.CollectionData","text":"CollectionData(key: str, version: int, name: str, parent_collection: Optional[str] = None, relations: Optional[Dict] = None)","title":"CollectionData"},{"location":"reference/connections/zotero/#notionsci.connections.zotero.structures.common","text":"","title":"common"},{"location":"reference/connections/zotero/#notionsci.connections.zotero.structures.common.Entity","text":"Entity(key: str, version: int)","title":"Entity"},{"location":"reference/connections/zotero/#notionsci.connections.zotero.structures.common.Meta","text":"Meta(created_by_user: Optional[Dict] = None, parsed_date: Optional[str] = None, creator_summary: Optional[str] = None, num_items: Optional[int] = None, num_collections: Optional[int] = None, num_children: Optional[int] = None)","title":"Meta"},{"location":"reference/connections/zotero/#notionsci.connections.zotero.structures.item","text":"","title":"item"},{"location":"reference/connections/zotero/#notionsci.connections.zotero.structures.item.Item","text":"Item(key: str, version: int, library: notionsci.connections.zotero.structures.library.Library, links: Dict, meta: notionsci.connections.zotero.structures.common.Meta, data: notionsci.connections.zotero.structures.item.ItemData, children: Optional[Dict[str, notionsci.connections.zotero.structures.item.ItemData]] = None)","title":"Item"},{"location":"reference/connections/zotero/#notionsci.connections.zotero.structures.item.ItemData","text":"ItemData(key: str, version: int, item_type: notionsci.connections.zotero.structures.item.ItemType, date_added: datetime.datetime, date_modified: datetime.datetime, parent_item: types.Undefinable_str = None, tags: Optional[List[notionsci.connections.zotero.structures.item.Tag]] = None, collections: Optional[List[str]] = None, relations: Optional[Dict] = None, properties: Optional[Dict[str, Any]] = None)","title":"ItemData"},{"location":"reference/connections/zotero/#notionsci.connections.zotero.structures.item.ItemType","text":"An enumeration.","title":"ItemType"},{"location":"reference/connections/zotero/#notionsci.connections.zotero.structures.item.Tag","text":"Tag(tag: str, type: types.Undefinable_int = None)","title":"Tag"},{"location":"reference/connections/zotero/#notionsci.connections.zotero.structures.library","text":"","title":"library"},{"location":"reference/connections/zotero/#notionsci.connections.zotero.structures.library.Library","text":"Library(id: int, type: notionsci.connections.zotero.structures.library.LibraryType, name: str, links: Dict)","title":"Library"},{"location":"reference/connections/zotero/#notionsci.connections.zotero.structures.library.LibraryType","text":"An enumeration.","title":"LibraryType"},{"location":"reference/connections/zotero/#notionsci.connections.zotero.structures.query","text":"","title":"query"},{"location":"reference/connections/zotero/#notionsci.connections.zotero.structures.query.Direction","text":"An enumeration.","title":"Direction"},{"location":"reference/connections/zotero/#notionsci.connections.zotero.structures.query.SearchPagination","text":"SearchPagination(sort: Optional[str] = None, direction: Optional[notionsci.connections.zotero.structures.query.Direction] = None, limit: int = 100, start: int = 0)","title":"SearchPagination"},{"location":"reference/connections/zotero/#notionsci.connections.zotero.structures.query.SearchParameters","text":"SearchParameters(item_key: Optional[List[str]] = None, item_type: Optional[str] = None, q: Optional[str] = None, since: Optional[int] = None, tag: Optional[str] = None, include_trashed: Optional[int] = None)","title":"SearchParameters"}]}